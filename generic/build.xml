<?xml version="1.0"?>
<project name="generic" basedir="." default="help">
	<!--
	============================================================================
		$Revision: 1.10 $ 
		$Id: build.xml,v 1.10 2006/02/27 15:00:52 szabolcs Exp $ 
		$Author: szabolcs $  
	============================================================================
	-->

	<!-- ====================================================== 	-->
	<!-- config file												-->
	<!-- ====================================================== 	-->
	
    <property file="build.properties"/>
	
	<!-- ====================================================== 	-->
	<!-- directory configs 											-->
	<!-- ====================================================== 	-->

	<property name="src.dir" value="src"/>
	<property name="build.dir" value="build"/>
	<property name="web.dir" value="web"/>
	<property name="test.dir" value="test"/>
	<property name="lib.dir" value="lib"/>
	<property name="config.dir" value="config"/>
	<property name="taglibs.dir" value="taglibs"/>
	<property name="dist.dir" value="dist"/>
	<property name="eventDefinitions.dir" value="eventDefinitions"/>
	<property name="webapp.name" value="generic"/>
	<property name="build.classes" value="build/classes"/>
	
	<!-- ====================================================== 	-->
	<!-- tomcat configs 											-->
	<!-- ====================================================== 	-->
	
	<property environment="env"/>
    <property name="tomcat.home" value="${tomcat.catalinahome}"/>

	<!-- ====================================================== 	-->
	<!-- classpath settings											-->
	<!-- ====================================================== 	-->
	
    <path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${tomcat.home}/common/lib">
            <include name="servlet*.jar"/>
        	<include name="jsp-api.jar"/>
        </fileset>
        <pathelement path="${build.dir}"/>
    </path>
	
	<taskdef file="tomcatTasks.properties">
	    <classpath>
	        <pathelement path="${tomcat.home}/server/lib/catalina-ant.jar"/>
	    </classpath>
	</taskdef>

	<!-- ====================================================== 	-->
	<!-- COMPILE													-->
	<!-- 															-->
	<!-- Compiles the projects source files and unit tests into 	-->
	<!-- build directory using the specified classpath.				-->
	<!-- Not suitable for production - debugging options are ON!	-->
	<!-- ====================================================== 	-->
	
    <target name="compile" description="Compile main source tree java files">
    	<!-- taget dir -->
        <mkdir dir="${build.dir}/classes"/>
    	
    	<!-- compile source files -->
        <javac destdir="${build.dir}/classes" target="1.4" debug="true"
            deprecation="false" optimize="false" failonerror="true">
            <src path="${src.dir}"/>
            <classpath refid="classpath"/>
        </javac>
    	
        <!-- compile tests -->
        <mkdir dir="${build.dir}/test"/>
        <javac destdir="${build.dir}/test" target="1.4" debug="true"
            deprecation="false" optimize="false" failonerror="true">
            <src path="${test.dir}"/>
            <classpath>
                <path refid="classpath"/>
                <path location="${build.dir}/classes"/>
            </classpath>
        </javac>
    	
        <!-- Copy hibernate mapping files to ${build.dir}/classes -->
        <copy todir="${build.dir}/classes">
            <fileset dir="${src.dir}" includes="**/*.hbm.xml"/>
        </copy>
    </target>
	
	<!-- ====================================================== 	-->
	<!-- DEPLOY														-->
	<!-- 															-->
	<!-- Creates a project structure and deploys it in the tomcat 	-->
	<!-- tomcat server.												-->
	<!-- ====================================================== 	-->
	<target name="deploy" depends="clean, compile" description="Deploy application">
		<!-- create structure in project dir -->
		
		
		<!-- copy classes into dist WEB-INF -->
		<copy todir="${dist.dir}/WEB-INF" preservelastmodified="true">
			<fileset dir="${build.dir}">
                <include name="**/*.*"/>
            </fileset>
		</copy>	
		
		<!-- copy lib into WEB-INF -->
		<copy todir="${dist.dir}/WEB-INF/lib" preservelastmodified="true">
			<fileset dir="${lib.dir}">
                <include name="*.jar"/>
            </fileset>
			<fileset dir="${lib.dir}/jakarta-log4j-1.2.9/dist/lib">
                <include name="**/*.*"/>
            </fileset>
			<fileset dir="${lib.dir}/jakarta-taglibs/standard-1.0.6/lib">
                <include name="jstl.jar"/>
                <include name="jaxen-full.jar"/>
                <include name="saxpath.jar"/>
            </fileset>	
			<!--fileset dir="${lib.dir}/jakarta-taglibs/standard-1.0.6/tld">
                <include name="*.*"/>
            </fileset-->
			<fileset dir="${lib.dir}/spring-1.2.6">
                <include name="**/*.*"/>
            </fileset>
			<fileset dir="${lib.dir}/hibernate-3.0.5">
                <include name="hibernate3.jar"/>
            </fileset>
			<fileset dir="${lib.dir}/hibernate-3.0.5/lib">
                <include name="antlr-2.7.5H3.jar"/>
            </fileset>
			<fileset dir="${lib.dir}/j2ee">
                <include name="*.*"/>
            </fileset>
			<fileset dir="${lib.dir}/hibernate-3.0.5/lib">
                <include name="jta.jar"/>
            </fileset>
			<fileset dir="${lib.dir}/hibernate-3.0.5/lib">
                <include name="dom4j-1.6.jar"/>
            </fileset>
			<fileset dir="${lib.dir}/ehcache-1.1">
                <include name="ehcache-1.1.jar"/>
            </fileset>
			<fileset dir="${lib.dir}/cglib-2.1_3">
                <include name="cglib-nodep-2.1_3.jar"/>
            </fileset>
			<fileset dir="${lib.dir}/jakarta-commons">
                <include name="*.jar"/>
            </fileset>	
			<fileset dir="${lib.dir}/sitemesh-2.2.1">
                <include name="sitemesh-2.2.1.jar"/>
            </fileset>	
			<fileset dir="${lib.dir}/xerces-2.7.1">
                <include name="*.jar"/>
            </fileset>	
			<fileset dir="${lib.dir}/lucene-1.4.3">
                <include name="*.jar"/>
            </fileset>	
		</copy>	
		
		<!-- copy taglibs into WEB-INF -->
		<!--copy todir="${dist.dir}/WEB-INF" preservelastmodified="true">
			<fileset dir="${taglibs.dir}">
                <include name="**/*.*"/>
            </fileset>
		</copy-->	
		
		<!-- copy hibernate mappings into dist root -->
		<copy todir="${dist.dir}/WEB-INF/classes" preservelastmodified="true">
			<fileset dir="${config.dir}/hibernate">
                <include name="**/*.*"/>
            </fileset>
		</copy>	
		
		<!-- copy web related config files into dist root -->
		<copy todir="${dist.dir}/WEB-INF" preservelastmodified="true">
			<fileset dir="${config.dir}/web">
                <include name="**/*.*"/>
            </fileset>
		</copy>	
		
		<!-- copy misc config files into dist root -->
		<copy todir="${dist.dir}/WEB-INF/classes" preservelastmodified="true">
			<fileset dir="${config.dir}/misc">
                <include name="**/*.*"/>
            </fileset>
		</copy>	
		
		<!-- copy event definitions into distribution path -->
		<copy todir="${dist.dir}/WEB-INF/classes" preservelastmodified="true">
			<fileset dir="${eventDefinitions.dir}">
                <include name="**/*.*"/>
            </fileset>
		</copy>	
		
		<!-- copy web related stuff into dist WEB-INF -->
		<copy todir="${dist.dir}" preservelastmodified="true">
			<fileset dir="${web.dir}">
                <include name="**/*.*"/>
                <exclude name="**/junit.jar"/>
                <exclude name="**/*mock.jar"/>
                <exclude name="**/strutstestcase*.jar"/>
            </fileset>
		</copy>	
		
		<!-- deploy in tomcat -->
        <copy todir="${tomcat.home}/webapps/${webapp.name}" preservelastmodified="true">
            <fileset dir="${dist.dir}"/>
        </copy>
    </target>
	
	<!-- ====================================================== 	-->
	<!-- CLEAN														-->
	<!-- 															-->
	<!-- Cleans up relevant directories							 	-->
	<!-- ====================================================== 	-->
	<target name="clean" description="Clean output directories, undeploy .war in Tomcat">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
	
	<!-- ====================================================== 	-->
	<!-- HELP													-->
	<!-- 															-->
	<!-- TODO:								 						-->
	<!-- ====================================================== 	-->
	
	<target name="help">
		<echo message=""/>
		<echo message="${webapp.name} build file"/>
		<echo message="-----------------------------------"/>
		<echo message=""/>
		<echo message="Available targets are:"/>
		<echo message=""/>
		<echo message="compile   --> Compile all Java files with debugging - NO PRODUCTION"/>
		<echo message="dist   	 --> deploys web app in tomcat"/>
		<echo message="clean   	 --> cleans up the project dir"/>
		<echo message=""/>
		<echo message="help      --> Displays this message"/>
		<echo message=""/>
		<echo message="Tomcat specific tasks:"/>
		<echo message="-----------------------------------"/>
		<echo message="tomcat-remove   --> removes this app from context"/>
		<echo message="tomcat-reload   --> reloads apps context"/>
		<echo message="tomcat-start    --> starts apps context"/>		
		<echo message="tomcat-stop     --> starts apps context"/>	
		<echo message="tomcat-stop     --> list all registered tomcat apps"/>
	</target>
	
	<!-- ====================================================== 	-->
	<!-- Middlegen													-->
	<!-- 															-->
	<!-- ====================================================== 	-->
	
	<target name="init">
  		<available property="xdoclet1.2+" classname="xdoclet.modules.ejb.EjbDocletTask" classpathref="classpath"/>
	</target>
   
	<target name="fail-if-no-xdoclet-1.2" unless="xdoclet1.2+">
		<fail>
			You must download several jar files before you can build Middlegen.
			Execute the "download-deps" target. Then try to build again.

  			If you are behind a proxy, you should define the properties
  			http.proxyHost and http.proxyPort. Example:
  
  			ant -Dhttp.proxyHost=foo.com -Dhttp.proxyPort=8080
  
  			It's also possible to download the jars manually.
  		</fail>
	</target>
	
	<target name="middlegen-SQLServer" description="Run Middlegen" unless="middlegen.skip" depends="init,fail-if-no-xdoclet-1.2">
	 	
		<taskdef name="middlegen" classname="middlegen.MiddlegenTask" classpathref="classpath"/>
		
		<middlegen
		     appname="${webapp.name}"
		     prefsdir="${src.dir}"
		     gui="true"
		     databaseurl="${sqlserver.url}"
		     initialContextFactory="${java.naming.factory.initial}"
		     providerURL="${java.naming.provider.url}"
		     driver="com.microsoft.sqlserver.jdbc.SQLServerDriver"
		     username="${sqlserver.username}"
		     password="${sqlserver.password}"
		     schema="${sqlserver.schema}"
		  	 catalog="${sqlserver.catalog}"
  		>
			<table name="CORRELATEDEVENTS"/>
			<table name="CORRELATIONSETS"/>
			
			<hibernate destination="${config.dir}" package="at.generic.model"/> 
		</middlegen>
	 </target>
	
	<target name="middlegen-Postgres" description="Run Middlegen" unless="middlegen.skip" depends="init,fail-if-no-xdoclet-1.2">
		 	
			<taskdef name="middlegen" classname="middlegen.MiddlegenTask" classpathref="classpath"/>
			
			<middlegen
			     appname="${webapp.name}"
			     prefsdir="${src.dir}"
			     gui="true"
			     databaseurl="${postgres.url}"
			     initialContextFactory="${java.naming.factory.initial}"
			     providerURL="${java.naming.provider.url}"
			     driver="org.postgresql.Driver"
			     username="${postgres.username}"
			     password="${postgres.password}"
	  		>
				<!--
				<table name="baseevent"/>
				<table name="orderreceivedevent"/>
				<table name="productcollection"/>
				
				<table name="events"/>
				<table name="rwtime"/>
				<table name="txtime"/>
				<table name="eventattributes"/>
				<table name="eventtype"/>
				<table name="dbinfos"/>
				-->
				<table name="wordindex"/>
				
				<hibernate destination="${config.dir}" package="at.generic.eventmodel"/> 
			</middlegen>
		 </target>
	
	<!-- ====================================================== 	-->
	<!-- Code Generator											-->
	<!-- 															-->
	<!-- ====================================================== 	-->
	<target name="generateModels"> 
		<!--taskdef name="hbm2java" classname="org.hibernate.tool.hbm2java.Hbm2JavaTask" classpathref="classpath"/--> 
		<taskdef name="hbm2java" classname="net.sf.hibernate.tool.hbm2java.Hbm2JavaTask" classpathref="classpath"/> 		
		<hbm2java output="${src.dir}"> 
		<fileset dir="${config.dir}/hibernate"> 
			<!-- <include name="**/*.hbm.xml"/> 
			<include name="**/Event.hbm.xml"/>
			<include name="**/Rwtime.hbm.xml"/>
			<include name="**/Txtime.hbm.xml"/>
			<include name="**/Eventattribute.hbm.xml"/>
			<include name="**/Eventtype.hbm.xml"/>
			<include name="**/Dbinfo.hbm.xml"/>
			<include name="**/Wordindex.hbm.xml"/-->
			<include name="**/Correlationset.hbm.xml"/>
		</fileset> 
		</hbm2java> 
	</target> 
	
	<!-- ====================================================== 	-->
	<!-- Copy Jsp													-->
	<!-- Copies only Jsps - for developing purpose so you don't		-->
	<!-- have to restart tomcat each time							-->
	<!-- ====================================================== 	-->
	<target name="copyJSP"> 
		<!-- copy web related stuff into dist WEB-INF -->
		<copy todir="${dist.dir}" preservelastmodified="true">
			<fileset dir="${web.dir}">
                <include name="**/*.*"/>
                <exclude name="**/junit.jar"/>
                <exclude name="**/*mock.jar"/>
                <exclude name="**/strutstestcase*.jar"/>
            </fileset>
		</copy>	
		
		<!-- deploy in tomcat -->
        <copy todir="${tomcat.home}/webapps/${webapp.name}" preservelastmodified="true">
            <fileset dir="${dist.dir}"/>
        </copy>
	</target> 
	
	<!-- ====================================================== 	-->
	<!-- TOMCAT SPECIFIC TASKS 										-->
	<!-- 															-->
	<!-- Undeploys webbapp from tomcat							 	-->
	<!-- ====================================================== 	-->

	<target name="tomcat-remove" description="Remove application from Tomcat">
        <undeploy url="${tomcat.manager.url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="tomcat-reload" description="Reload application in Tomcat">
        <reload url="${tomcat.manager.url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="tomcat-start" description="Start Tomcat application">
        <start url="${tomcat.manager.url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="tomcat-stop" description="Stop Tomcat application">
        <stop url="${tomcat.manager.url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"
            path="/${webapp.name}"/>
    </target>

    <target name="tomcat-list" description="List Tomcat applications">
        <list url="${tomcat.manager.url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"/>
    </target>
</project>